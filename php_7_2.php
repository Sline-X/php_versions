<?php
//Новый тип object
//может использоваться в передаваемых параметрах (контравариантность) 
//и возвращаемых значениях (ковариантность) для любых объектов

function test(object $obj) : object
{
    return new SplQueue();
}

test(new StdClass());

//Разрешено переопределение абстрактных методов
//Абстрактные методы теперь можно переопределить, в случаях когда абстрактный класс 
//наследуется от другого абстрактного класса.

abstract class A
{
    abstract function test(string $s);
}
abstract class B extends A
{
    // переопределён - всё ещё сохраняя контравариантность для параметров и ковариантность для возвращаемых значений
    abstract function test($s) : int;
}

//Расширение типа параметра
//Типы параметров из переопределённых методов и реализаций интерфейсов теперь могут быть опущены. 
//Это всё ещё соответствует LSP, так как параметры типов контравариантны.
interface A
{
    public function Test(array $input);
}

class B implements A
{
    public function Test($input){} // тип параметра не указан $input
}

//deprecated
//Строки без кавычек
//Строки без кавычек, которые не являются существующими глобальными константами, считались за строки.
var_dump(NONEXISTENT);

//Функция __autoload() была объявлена устаревшей
// в php 8.0 удалена

//Параметр mbstring.func_overload ¶
//Учитывая проблемы совместимости строковых функций, используемых в окружениях с включённым 
//этим параметром, этот параметр объявлен устаревшим.

//Приведение типа (unset) 
//Приведение любого выражения с использованием этого типа всегда приводит к null, 
//и поэтому этот избыточный тип приведения объявлен устаревшим.

//Функция each()
//Эта функция намного медленнее по итерации, чем использование обычного foreach, 
//и создаёт проблемы с реализацией для некоторых изменений языка, поэтому данная функция объявлена устаревшей.